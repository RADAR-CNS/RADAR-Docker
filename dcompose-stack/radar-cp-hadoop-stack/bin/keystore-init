#!/bin/bash

cd "$( dirname "${BASH_SOURCE[0]}" )/.."

. ./.env
. lib/util.sh

keystorefile=etc/managementportal/config/keystore.jks
KEYTOOL_OPTS="-keystore ${keystorefile} -storepass radarbase -keypass radarbase $KEYTOOL_OPTS"
if ! keytool -list $KEYTOOL_OPTS -alias radarbase-managementportal-ec >/dev/null 2>/dev/null; then
  KEYTOOL_CREATE_OPTS="-genkeypair -alias radarbase-managementportal-ec -keyalg EC -keysize 256 -sigalg SHA256withECDSA -storetype JKS $KEYTOOL_CREATE_OPTS"
  if [ -n "${MANAGEMENTPORTAL_KEY_DNAME}" ]; then
    KEYTOOL_CREATE_OPTS="$KEYTOOL_CREATE_OPTS -dname ${MANAGEMENTPORTAL_KEY_DNAME}"
  fi
  echo "--> Generating keystore to hold EC keypair for JWT signing"
  keytool $KEYTOOL_CREATE_OPTS $KEYTOOL_OPTS
else
  echo "--> ECDSA keypair for signing JWTs already exists. Not creating a new one."
fi

chmod 400 "${keystorefile}"


GATEWAY_CONF=etc/gateway/radar-is.yml
echo "--> Updating gateway signature keys"
echo "resourceName: res_gateway" > $GATEWAY_CONF
echo "publicKeys:" >> $GATEWAY_CONF

ALIASES=($(keytool -list $KEYTOOL_OPTS | grep PrivateKeyEntry | sed -e 's/^\([^,]*\),.*$/\1/'))
for (( i=0; i < ${#ALIASES[@]}; i++)); do
  ALIAS=${ALIASES[$i]}
  ensure_variable "MANAGEMENTPORTAL_OAUTH_CHECKING_KEY_ALIASES_$i=" $ALIAS .env
  echo "  - |-" >> $GATEWAY_CONF
  if keytool -export $KEYTOOL_OPTS -alias $ALIAS | openssl x509 -inform der -text | grep -q ecdsa-with-SHA256; then
    REPLACE_PUBKEY="EC PUBLIC KEY"
  else
    REPLACE_PUBKEY="PUBLIC KEY"
  fi

  cert="$(keytool -export $KEYTOOL_OPTS -alias $ALIAS | openssl x509 -inform der -pubkey -noout)"
  while IFS='' read -r line && [ -n "$line" ]; do
    line=$(sed "s/PUBLIC KEY/$REPLACE_PUBKEY/" <<< $line)
    echo "    $line" >> $GATEWAY_CONF
  done <<< "$cert"
done

