# Continuous integration and conditional deployment to stage
name: Main 

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  continuous-integration:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"

      - name: Login to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Before install
        run: |
          docker --version
          mkdir -p "$HOME/bin";
          export PATH="$HOME/bin:$PATH";
          sudo docker-compose --version
      
      - name: Standard stack
        run: |
          cd dcompose-stack/radar-cp-stack
          sudo docker-compose up -d --build && sleep 15 && [ -z "$(sudo docker-compose ps | tail -n +3 | grep " Exit ")" ]
          sudo docker-compose down
      
      - name: With email and HDFS support
        run: |
          cd dcompose-stack/radar-cp-hadoop-stack/ci
          ./setup-env.sh
          cd ../
          bin/radar-docker install
          sleep 120
          bin/radar-docker ps
          [ -z "$(bin/radar-docker ps | tail -n +3 | grep " Exit " | grep -v "kafka-init_1")" ]

      - name: Firebase messaging stack
        run: |
          cd  dcompose-stack/firebase-app-server
          cp etc/env.template .env
          sudo docker-compose up -d --build && sleep 15 && [ -z "$(sudo docker-compose ps | tail -n +3 | grep " Exit ")" ]
          sudo docker-compose down

  # Deploy to stage on merging into dev
  if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
  deployment-to-stage:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [continuous-integration]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Create deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name radar-backend \
            --deployment-group-name RadarBackendDeploymentGroupName \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
